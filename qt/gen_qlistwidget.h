#pragma once
#ifndef MIQT_QT_GEN_QLISTWIDGET_H
#define MIQT_QT_GEN_QLISTWIDGET_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#include "../libmiqt/libmiqt.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __cplusplus
class QAbstractItemView;
class QAbstractScrollArea;
class QBrush;
class QColor;
class QDataStream;
class QDragLeaveEvent;
class QDragMoveEvent;
class QDropEvent;
class QEvent;
class QFont;
class QFrame;
class QIcon;
class QItemSelection;
class QItemSelectionModel;
class QListView;
class QListWidget;
class QListWidgetItem;
class QMetaObject;
class QMimeData;
class QModelIndex;
class QMouseEvent;
class QObject;
class QPaintDevice;
class QPaintEvent;
class QPoint;
class QRect;
class QRegion;
class QResizeEvent;
class QSize;
class QStyleOptionViewItem;
class QTimerEvent;
class QVariant;
class QWheelEvent;
class QWidget;
#else
typedef struct QAbstractItemView QAbstractItemView;
typedef struct QAbstractScrollArea QAbstractScrollArea;
typedef struct QBrush QBrush;
typedef struct QColor QColor;
typedef struct QDataStream QDataStream;
typedef struct QDragLeaveEvent QDragLeaveEvent;
typedef struct QDragMoveEvent QDragMoveEvent;
typedef struct QDropEvent QDropEvent;
typedef struct QEvent QEvent;
typedef struct QFont QFont;
typedef struct QFrame QFrame;
typedef struct QIcon QIcon;
typedef struct QItemSelection QItemSelection;
typedef struct QItemSelectionModel QItemSelectionModel;
typedef struct QListView QListView;
typedef struct QListWidget QListWidget;
typedef struct QListWidgetItem QListWidgetItem;
typedef struct QMetaObject QMetaObject;
typedef struct QMimeData QMimeData;
typedef struct QModelIndex QModelIndex;
typedef struct QMouseEvent QMouseEvent;
typedef struct QObject QObject;
typedef struct QPaintDevice QPaintDevice;
typedef struct QPaintEvent QPaintEvent;
typedef struct QPoint QPoint;
typedef struct QRect QRect;
typedef struct QRegion QRegion;
typedef struct QResizeEvent QResizeEvent;
typedef struct QSize QSize;
typedef struct QStyleOptionViewItem QStyleOptionViewItem;
typedef struct QTimerEvent QTimerEvent;
typedef struct QVariant QVariant;
typedef struct QWheelEvent QWheelEvent;
typedef struct QWidget QWidget;
#endif

QListWidgetItem* QListWidgetItem_new();
QListWidgetItem* QListWidgetItem_new2(struct miqt_string text);
QListWidgetItem* QListWidgetItem_new3(QIcon* icon, struct miqt_string text);
QListWidgetItem* QListWidgetItem_new4(QListWidgetItem* other);
QListWidgetItem* QListWidgetItem_new5(QListWidget* listview);
QListWidgetItem* QListWidgetItem_new6(QListWidget* listview, int typeVal);
QListWidgetItem* QListWidgetItem_new7(struct miqt_string text, QListWidget* listview);
QListWidgetItem* QListWidgetItem_new8(struct miqt_string text, QListWidget* listview, int typeVal);
QListWidgetItem* QListWidgetItem_new9(QIcon* icon, struct miqt_string text, QListWidget* listview);
QListWidgetItem* QListWidgetItem_new10(QIcon* icon, struct miqt_string text, QListWidget* listview, int typeVal);
QListWidgetItem* QListWidgetItem_Clone(const QListWidgetItem* self);
QListWidget* QListWidgetItem_ListWidget(const QListWidgetItem* self);
void QListWidgetItem_SetSelected(QListWidgetItem* self, bool selectVal);
bool QListWidgetItem_IsSelected(const QListWidgetItem* self);
void QListWidgetItem_SetHidden(QListWidgetItem* self, bool hide);
bool QListWidgetItem_IsHidden(const QListWidgetItem* self);
int QListWidgetItem_Flags(const QListWidgetItem* self);
void QListWidgetItem_SetFlags(QListWidgetItem* self, int flags);
struct miqt_string QListWidgetItem_Text(const QListWidgetItem* self);
void QListWidgetItem_SetText(QListWidgetItem* self, struct miqt_string text);
QIcon* QListWidgetItem_Icon(const QListWidgetItem* self);
void QListWidgetItem_SetIcon(QListWidgetItem* self, QIcon* icon);
struct miqt_string QListWidgetItem_StatusTip(const QListWidgetItem* self);
void QListWidgetItem_SetStatusTip(QListWidgetItem* self, struct miqt_string statusTip);
struct miqt_string QListWidgetItem_ToolTip(const QListWidgetItem* self);
void QListWidgetItem_SetToolTip(QListWidgetItem* self, struct miqt_string toolTip);
struct miqt_string QListWidgetItem_WhatsThis(const QListWidgetItem* self);
void QListWidgetItem_SetWhatsThis(QListWidgetItem* self, struct miqt_string whatsThis);
QFont* QListWidgetItem_Font(const QListWidgetItem* self);
void QListWidgetItem_SetFont(QListWidgetItem* self, QFont* font);
int QListWidgetItem_TextAlignment(const QListWidgetItem* self);
void QListWidgetItem_SetTextAlignment(QListWidgetItem* self, int alignment);
QColor* QListWidgetItem_BackgroundColor(const QListWidgetItem* self);
void QListWidgetItem_SetBackgroundColor(QListWidgetItem* self, QColor* color);
QBrush* QListWidgetItem_Background(const QListWidgetItem* self);
void QListWidgetItem_SetBackground(QListWidgetItem* self, QBrush* brush);
QColor* QListWidgetItem_TextColor(const QListWidgetItem* self);
void QListWidgetItem_SetTextColor(QListWidgetItem* self, QColor* color);
QBrush* QListWidgetItem_Foreground(const QListWidgetItem* self);
void QListWidgetItem_SetForeground(QListWidgetItem* self, QBrush* brush);
int QListWidgetItem_CheckState(const QListWidgetItem* self);
void QListWidgetItem_SetCheckState(QListWidgetItem* self, int state);
QSize* QListWidgetItem_SizeHint(const QListWidgetItem* self);
void QListWidgetItem_SetSizeHint(QListWidgetItem* self, QSize* size);
QVariant* QListWidgetItem_Data(const QListWidgetItem* self, int role);
void QListWidgetItem_SetData(QListWidgetItem* self, int role, QVariant* value);
bool QListWidgetItem_OperatorLesser(const QListWidgetItem* self, QListWidgetItem* other);
void QListWidgetItem_Read(QListWidgetItem* self, QDataStream* in);
void QListWidgetItem_Write(const QListWidgetItem* self, QDataStream* out);
void QListWidgetItem_OperatorAssign(QListWidgetItem* self, QListWidgetItem* other);
int QListWidgetItem_Type(const QListWidgetItem* self);
bool QListWidgetItem_override_virtual_Clone(void* self, intptr_t slot);
QListWidgetItem* QListWidgetItem_virtualbase_Clone(const void* self);
bool QListWidgetItem_override_virtual_SetBackgroundColor(void* self, intptr_t slot);
void QListWidgetItem_virtualbase_SetBackgroundColor(void* self, QColor* color);
bool QListWidgetItem_override_virtual_Data(void* self, intptr_t slot);
QVariant* QListWidgetItem_virtualbase_Data(const void* self, int role);
bool QListWidgetItem_override_virtual_SetData(void* self, intptr_t slot);
void QListWidgetItem_virtualbase_SetData(void* self, int role, QVariant* value);
bool QListWidgetItem_override_virtual_OperatorLesser(void* self, intptr_t slot);
bool QListWidgetItem_virtualbase_OperatorLesser(const void* self, QListWidgetItem* other);
bool QListWidgetItem_override_virtual_Read(void* self, intptr_t slot);
void QListWidgetItem_virtualbase_Read(void* self, QDataStream* in);
bool QListWidgetItem_override_virtual_Write(void* self, intptr_t slot);
void QListWidgetItem_virtualbase_Write(const void* self, QDataStream* out);
void QListWidgetItem_Delete(QListWidgetItem* self);

QListWidget* QListWidget_new(QWidget* parent);
QListWidget* QListWidget_new2();
void QListWidget_virtbase(QListWidget* src, QListView** outptr_QListView);
QMetaObject* QListWidget_MetaObject(const QListWidget* self);
void* QListWidget_Metacast(QListWidget* self, const char* param1);
struct miqt_string QListWidget_Tr(const char* s);
struct miqt_string QListWidget_TrUtf8(const char* s);
void QListWidget_SetSelectionModel(QListWidget* self, QItemSelectionModel* selectionModel);
QListWidgetItem* QListWidget_Item(const QListWidget* self, int row);
int QListWidget_Row(const QListWidget* self, QListWidgetItem* item);
void QListWidget_InsertItem(QListWidget* self, int row, QListWidgetItem* item);
void QListWidget_InsertItem2(QListWidget* self, int row, struct miqt_string label);
void QListWidget_InsertItems(QListWidget* self, int row, struct miqt_array /* of struct miqt_string */  labels);
void QListWidget_AddItem(QListWidget* self, struct miqt_string label);
void QListWidget_AddItemWithItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_AddItems(QListWidget* self, struct miqt_array /* of struct miqt_string */  labels);
QListWidgetItem* QListWidget_TakeItem(QListWidget* self, int row);
int QListWidget_Count(const QListWidget* self);
QListWidgetItem* QListWidget_CurrentItem(const QListWidget* self);
void QListWidget_SetCurrentItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_SetCurrentItem2(QListWidget* self, QListWidgetItem* item, int command);
int QListWidget_CurrentRow(const QListWidget* self);
void QListWidget_SetCurrentRow(QListWidget* self, int row);
void QListWidget_SetCurrentRow2(QListWidget* self, int row, int command);
QListWidgetItem* QListWidget_ItemAt(const QListWidget* self, QPoint* p);
QListWidgetItem* QListWidget_ItemAt2(const QListWidget* self, int x, int y);
QRect* QListWidget_VisualItemRect(const QListWidget* self, QListWidgetItem* item);
void QListWidget_SortItems(QListWidget* self);
void QListWidget_SetSortingEnabled(QListWidget* self, bool enable);
bool QListWidget_IsSortingEnabled(const QListWidget* self);
void QListWidget_EditItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_OpenPersistentEditor(QListWidget* self, QListWidgetItem* item);
void QListWidget_ClosePersistentEditor(QListWidget* self, QListWidgetItem* item);
bool QListWidget_IsPersistentEditorOpen(const QListWidget* self, QListWidgetItem* item);
QWidget* QListWidget_ItemWidget(const QListWidget* self, QListWidgetItem* item);
void QListWidget_SetItemWidget(QListWidget* self, QListWidgetItem* item, QWidget* widget);
void QListWidget_RemoveItemWidget(QListWidget* self, QListWidgetItem* item);
bool QListWidget_IsItemSelected(const QListWidget* self, QListWidgetItem* item);
void QListWidget_SetItemSelected(QListWidget* self, QListWidgetItem* item, bool selectVal);
struct miqt_array /* of QListWidgetItem* */  QListWidget_SelectedItems(const QListWidget* self);
struct miqt_array /* of QListWidgetItem* */  QListWidget_FindItems(const QListWidget* self, struct miqt_string text, int flags);
bool QListWidget_IsItemHidden(const QListWidget* self, QListWidgetItem* item);
void QListWidget_SetItemHidden(QListWidget* self, QListWidgetItem* item, bool hide);
void QListWidget_DropEvent(QListWidget* self, QDropEvent* event);
void QListWidget_ScrollToItem(QListWidget* self, QListWidgetItem* item);
void QListWidget_Clear(QListWidget* self);
void QListWidget_ItemPressed(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemPressed(QListWidget* self, intptr_t slot);
void QListWidget_ItemClicked(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemClicked(QListWidget* self, intptr_t slot);
void QListWidget_ItemDoubleClicked(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemDoubleClicked(QListWidget* self, intptr_t slot);
void QListWidget_ItemActivated(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemActivated(QListWidget* self, intptr_t slot);
void QListWidget_ItemEntered(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemEntered(QListWidget* self, intptr_t slot);
void QListWidget_ItemChanged(QListWidget* self, QListWidgetItem* item);
void QListWidget_connect_ItemChanged(QListWidget* self, intptr_t slot);
void QListWidget_CurrentItemChanged(QListWidget* self, QListWidgetItem* current, QListWidgetItem* previous);
void QListWidget_connect_CurrentItemChanged(QListWidget* self, intptr_t slot);
void QListWidget_CurrentTextChanged(QListWidget* self, struct miqt_string currentText);
void QListWidget_connect_CurrentTextChanged(QListWidget* self, intptr_t slot);
void QListWidget_CurrentRowChanged(QListWidget* self, int currentRow);
void QListWidget_connect_CurrentRowChanged(QListWidget* self, intptr_t slot);
void QListWidget_ItemSelectionChanged(QListWidget* self);
void QListWidget_connect_ItemSelectionChanged(QListWidget* self, intptr_t slot);
bool QListWidget_Event(QListWidget* self, QEvent* e);
struct miqt_array /* of struct miqt_string */  QListWidget_MimeTypes(const QListWidget* self);
QMimeData* QListWidget_MimeData(const QListWidget* self, struct miqt_array /* of QListWidgetItem* */  items);
bool QListWidget_DropMimeData(QListWidget* self, int index, QMimeData* data, int action);
int QListWidget_SupportedDropActions(const QListWidget* self);
struct miqt_string QListWidget_Tr2(const char* s, const char* c);
struct miqt_string QListWidget_Tr3(const char* s, const char* c, int n);
struct miqt_string QListWidget_TrUtf82(const char* s, const char* c);
struct miqt_string QListWidget_TrUtf83(const char* s, const char* c, int n);
void QListWidget_SortItems1(QListWidget* self, int order);
void QListWidget_ScrollToItem2(QListWidget* self, QListWidgetItem* item, int hint);
bool QListWidget_override_virtual_SetSelectionModel(void* self, intptr_t slot);
void QListWidget_virtualbase_SetSelectionModel(void* self, QItemSelectionModel* selectionModel);
bool QListWidget_override_virtual_DropEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_DropEvent(void* self, QDropEvent* event);
bool QListWidget_override_virtual_Event(void* self, intptr_t slot);
bool QListWidget_virtualbase_Event(void* self, QEvent* e);
bool QListWidget_override_virtual_MimeTypes(void* self, intptr_t slot);
struct miqt_array /* of struct miqt_string */  QListWidget_virtualbase_MimeTypes(const void* self);
bool QListWidget_override_virtual_MimeData(void* self, intptr_t slot);
QMimeData* QListWidget_virtualbase_MimeData(const void* self, struct miqt_array /* of QListWidgetItem* */  items);
bool QListWidget_override_virtual_DropMimeData(void* self, intptr_t slot);
bool QListWidget_virtualbase_DropMimeData(void* self, int index, QMimeData* data, int action);
bool QListWidget_override_virtual_SupportedDropActions(void* self, intptr_t slot);
int QListWidget_virtualbase_SupportedDropActions(const void* self);
bool QListWidget_override_virtual_VisualRect(void* self, intptr_t slot);
QRect* QListWidget_virtualbase_VisualRect(const void* self, QModelIndex* index);
bool QListWidget_override_virtual_ScrollTo(void* self, intptr_t slot);
void QListWidget_virtualbase_ScrollTo(void* self, QModelIndex* index, int hint);
bool QListWidget_override_virtual_IndexAt(void* self, intptr_t slot);
QModelIndex* QListWidget_virtualbase_IndexAt(const void* self, QPoint* p);
bool QListWidget_override_virtual_DoItemsLayout(void* self, intptr_t slot);
void QListWidget_virtualbase_DoItemsLayout(void* self);
bool QListWidget_override_virtual_Reset(void* self, intptr_t slot);
void QListWidget_virtualbase_Reset(void* self);
bool QListWidget_override_virtual_SetRootIndex(void* self, intptr_t slot);
void QListWidget_virtualbase_SetRootIndex(void* self, QModelIndex* index);
bool QListWidget_override_virtual_ScrollContentsBy(void* self, intptr_t slot);
void QListWidget_virtualbase_ScrollContentsBy(void* self, int dx, int dy);
bool QListWidget_override_virtual_DataChanged(void* self, intptr_t slot);
void QListWidget_virtualbase_DataChanged(void* self, QModelIndex* topLeft, QModelIndex* bottomRight, struct miqt_array /* of int */  roles);
bool QListWidget_override_virtual_RowsInserted(void* self, intptr_t slot);
void QListWidget_virtualbase_RowsInserted(void* self, QModelIndex* parent, int start, int end);
bool QListWidget_override_virtual_RowsAboutToBeRemoved(void* self, intptr_t slot);
void QListWidget_virtualbase_RowsAboutToBeRemoved(void* self, QModelIndex* parent, int start, int end);
bool QListWidget_override_virtual_MouseMoveEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_MouseMoveEvent(void* self, QMouseEvent* e);
bool QListWidget_override_virtual_MouseReleaseEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_MouseReleaseEvent(void* self, QMouseEvent* e);
bool QListWidget_override_virtual_WheelEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_WheelEvent(void* self, QWheelEvent* e);
bool QListWidget_override_virtual_TimerEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_TimerEvent(void* self, QTimerEvent* e);
bool QListWidget_override_virtual_ResizeEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_ResizeEvent(void* self, QResizeEvent* e);
bool QListWidget_override_virtual_DragMoveEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_DragMoveEvent(void* self, QDragMoveEvent* e);
bool QListWidget_override_virtual_DragLeaveEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_DragLeaveEvent(void* self, QDragLeaveEvent* e);
bool QListWidget_override_virtual_StartDrag(void* self, intptr_t slot);
void QListWidget_virtualbase_StartDrag(void* self, int supportedActions);
bool QListWidget_override_virtual_ViewOptions(void* self, intptr_t slot);
QStyleOptionViewItem* QListWidget_virtualbase_ViewOptions(const void* self);
bool QListWidget_override_virtual_PaintEvent(void* self, intptr_t slot);
void QListWidget_virtualbase_PaintEvent(void* self, QPaintEvent* e);
bool QListWidget_override_virtual_HorizontalOffset(void* self, intptr_t slot);
int QListWidget_virtualbase_HorizontalOffset(const void* self);
bool QListWidget_override_virtual_VerticalOffset(void* self, intptr_t slot);
int QListWidget_virtualbase_VerticalOffset(const void* self);
bool QListWidget_override_virtual_MoveCursor(void* self, intptr_t slot);
QModelIndex* QListWidget_virtualbase_MoveCursor(void* self, int cursorAction, int modifiers);
bool QListWidget_override_virtual_SetSelection(void* self, intptr_t slot);
void QListWidget_virtualbase_SetSelection(void* self, QRect* rect, int command);
bool QListWidget_override_virtual_VisualRegionForSelection(void* self, intptr_t slot);
QRegion* QListWidget_virtualbase_VisualRegionForSelection(const void* self, QItemSelection* selection);
bool QListWidget_override_virtual_SelectedIndexes(void* self, intptr_t slot);
struct miqt_array /* of QModelIndex* */  QListWidget_virtualbase_SelectedIndexes(const void* self);
bool QListWidget_override_virtual_UpdateGeometries(void* self, intptr_t slot);
void QListWidget_virtualbase_UpdateGeometries(void* self);
bool QListWidget_override_virtual_IsIndexHidden(void* self, intptr_t slot);
bool QListWidget_virtualbase_IsIndexHidden(const void* self, QModelIndex* index);
bool QListWidget_override_virtual_SelectionChanged(void* self, intptr_t slot);
void QListWidget_virtualbase_SelectionChanged(void* self, QItemSelection* selected, QItemSelection* deselected);
bool QListWidget_override_virtual_CurrentChanged(void* self, intptr_t slot);
void QListWidget_virtualbase_CurrentChanged(void* self, QModelIndex* current, QModelIndex* previous);
bool QListWidget_override_virtual_ViewportSizeHint(void* self, intptr_t slot);
QSize* QListWidget_virtualbase_ViewportSizeHint(const void* self);
void QListWidget_Delete(QListWidget* self);

#ifdef __cplusplus
} /* extern C */
#endif 

#endif
